# Generated by Django 2.1.4 on 2019-01-14 22:51

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import filmdemocracy.democracy.models
import markdownx.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Club',
            fields=[
                ('id', models.CharField(max_length=5, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=25, verbose_name='Club name')),
                ('short_description', models.CharField(max_length=100, verbose_name='Short club description')),
                ('panel', markdownx.models.MarkdownxField(blank=True, default="## A sample club panel written in markdown\n\n---\n\n#### Point 1: Here is some text. \nHello world, I'm a cinema club... \n\n#### Point 2: And here is a list to consider: \n1. Item #1\n2. Item #2\n3. Item #3\n\n#### Point 3: And here is an unordered list to consider:\n- Item 1\n- Item 2\n- Item 3", max_length=1000, null=True, verbose_name='Club panel: description, rules, etc. (optional)')),
                ('logo', models.ImageField(blank=True, null=True, upload_to=filmdemocracy.democracy.models.get_club_logo_path, verbose_name='club logo')),
                ('admin_members', models.ManyToManyField(related_name='admin_members', to=settings.AUTH_USER_MODEL)),
                ('members', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Film',
            fields=[
                ('id', models.CharField(max_length=12, primary_key=True, serialize=False, unique=True)),
                ('pub_date', models.DateTimeField(auto_now_add=True, verbose_name='date published')),
                ('seen', models.BooleanField(default=False)),
                ('seen_date', models.DateField(blank=True, null=True, verbose_name='date seen')),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='democracy.Club')),
            ],
        ),
        migrations.CreateModel(
            name='FilmDb',
            fields=[
                ('imdb_id', models.CharField(max_length=7, primary_key=True, serialize=False, verbose_name='IMDb id')),
                ('faff_id', models.CharField(default='', max_length=6, verbose_name='FilmAffinity id')),
                ('title', models.CharField(default='', max_length=200)),
                ('year', models.IntegerField(default=0)),
                ('rated', models.CharField(default='', max_length=10)),
                ('duration', models.IntegerField(default=0)),
                ('director', models.CharField(default='', max_length=100)),
                ('writer', models.CharField(default='', max_length=200)),
                ('actors', models.CharField(default='', max_length=300)),
                ('poster_url', models.URLField(default='', max_length=500)),
                ('country', models.CharField(default='', max_length=100)),
                ('language', models.CharField(default='', max_length=20)),
                ('plot', models.CharField(default='', max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='Meeting',
            fields=[
                ('id', models.CharField(max_length=9, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(default='Club meeting', max_length=50, verbose_name='Name')),
                ('description', models.CharField(default='', max_length=100, verbose_name='Description')),
                ('place', models.CharField(default='', max_length=100, verbose_name='Place')),
                ('date', models.DateField(default=datetime.date(2019, 1, 21), verbose_name='Date')),
                ('time_start', models.TimeField(blank=True, null=True, verbose_name='Start time (Optional)')),
                ('time_end', models.TimeField(blank=True, null=True, verbose_name='End time (Optional)')),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='democracy.Club')),
                ('members_maybe', models.ManyToManyField(related_name='members_maybe', to=settings.AUTH_USER_MODEL)),
                ('members_yes', models.ManyToManyField(related_name='members_yes', to=settings.AUTH_USER_MODEL)),
                ('organizer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote_date', models.DateTimeField(auto_now_add=True, verbose_name='date of vote')),
                ('choice', models.CharField(choices=[('omg', 'I really really want to see it.'), ('yes', 'I want to see it.'), ('seenok', "I've seen it, but I wouldn't mind seeing it again."), ('meh', 'Meh...'), ('no', "I don't want to see it."), ('seenno', "I've seen it, and I don't want to see it again."), ('veto', 'Veto!')], max_length=6)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='democracy.Club')),
                ('film', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='democracy.Film')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='film',
            name='filmdb',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='democracy.FilmDb'),
        ),
        migrations.AddField(
            model_name='film',
            name='proposed_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='film',
            name='seen_by',
            field=models.ManyToManyField(related_name='seen_by', to=settings.AUTH_USER_MODEL),
        ),
    ]
